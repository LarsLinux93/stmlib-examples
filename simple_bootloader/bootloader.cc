// Copyright 2012 Emilie Gillet.
// 
// Author: Emilie Gillet (emilie.o.gillet@gmail.com)
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
// 
// See http://creativecommons.org/licenses/MIT/ for more information.

#include <stm32f10x_conf.h>

#include "stmlib/system/bootloader_utils.h"
#include "stmlib/system/flash_programming.h"

using namespace stmlib;

// Default interrupt handlers.
extern "C" {

void HardFault_Handler() { while (1); }
void MemManage_Handler() { while (1); }
void BusFault_Handler() { while (1); }
void UsageFault_Handler() { while (1); }
void NMI_Handler() { }
void SVC_Handler() { }
void DebugMon_Handler() { }
void PendSV_Handler() { }
void SysTick_Handler() { }

}

const uint8_t blink_code[] = {
  0x00, 0x02, 0x00, 0x20, 0xa1, 0x43, 0x00, 0x08, 0x1d, 0x41, 0x00, 0x08,
  0x0d, 0x41, 0x00, 0x08, 0x11, 0x41, 0x00, 0x08, 0x15, 0x41, 0x00, 0x08,
  0x19, 0x41, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x41, 0x00, 0x08,
  0x25, 0x41, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x29, 0x41, 0x00, 0x08,
  0x2d, 0x41, 0x00, 0x08, 0xe1, 0x43, 0x00, 0x08, 0xe1, 0x43, 0x00, 0x08,
  0xe1, 0x43, 0x00, 0x08, 0xe1, 0x43, 0x00, 0x08, 0xe1, 0x43, 0x00, 0x08,
  0xe1, 0x43, 0x00, 0x08, 0xe1, 0x43, 0x00, 0x08, 0xe1, 0x43, 0x00, 0x08,
  0xe1, 0x43, 0x00, 0x08, 0xe1, 0x43, 0x00, 0x08, 0xe1, 0x43, 0x00, 0x08,
  0xe1, 0x43, 0x00, 0x08, 0xe1, 0x43, 0x00, 0x08, 0xe1, 0x43, 0x00, 0x08,
  0xe1, 0x43, 0x00, 0x08, 0xe1, 0x43, 0x00, 0x08, 0xe1, 0x43, 0x00, 0x08,
  0xe1, 0x43, 0x00, 0x08, 0xe1, 0x43, 0x00, 0x08, 0xe1, 0x43, 0x00, 0x08,
  0xe1, 0x43, 0x00, 0x08, 0xe1, 0x43, 0x00, 0x08, 0xe1, 0x43, 0x00, 0x08,
  0xe1, 0x43, 0x00, 0x08, 0xe1, 0x43, 0x00, 0x08, 0xe1, 0x43, 0x00, 0x08,
  0xe1, 0x43, 0x00, 0x08, 0xe1, 0x43, 0x00, 0x08, 0xe1, 0x43, 0x00, 0x08,
  0xe1, 0x43, 0x00, 0x08, 0xe1, 0x43, 0x00, 0x08, 0xe1, 0x43, 0x00, 0x08,
  0xe1, 0x43, 0x00, 0x08, 0xe1, 0x43, 0x00, 0x08, 0xe1, 0x43, 0x00, 0x08,
  0xe1, 0x43, 0x00, 0x08, 0xe1, 0x43, 0x00, 0x08, 0xe1, 0x43, 0x00, 0x08,
  0xe1, 0x43, 0x00, 0x08, 0xe1, 0x43, 0x00, 0x08, 0xe1, 0x43, 0x00, 0x08,
  0xe1, 0x43, 0x00, 0x08, 0xe1, 0x43, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x5f, 0xf8, 0x08, 0xf1, 0xfe, 0xe7, 0x00, 0xbf, 0xfe, 0xe7, 0x00, 0xbf,
  0xfe, 0xe7, 0x00, 0xbf, 0xfe, 0xe7, 0x00, 0xbf, 0x70, 0x47, 0x00, 0xbf,
  0x70, 0x47, 0x00, 0xbf, 0x70, 0x47, 0x00, 0xbf, 0x70, 0x47, 0x00, 0xbf,
  0x06, 0x4a, 0x13, 0x78, 0x83, 0xf0, 0x01, 0x03, 0x13, 0x70, 0x1b, 0xb9,
  0x04, 0x48, 0x20, 0x21, 0x00, 0xf0, 0x20, 0xb9, 0x02, 0x48, 0x20, 0x21,
  0x00, 0xf0, 0x1a, 0xb9, 0x00, 0x02, 0x00, 0x20, 0x00, 0x08, 0x01, 0x40,
  0x00, 0xb5, 0x83, 0xb0, 0x00, 0xf0, 0x30, 0xf8, 0x4f, 0xf0, 0x00, 0x60,
  0x4f, 0xf4, 0x80, 0x41, 0x00, 0xf0, 0xa8, 0xf8, 0x04, 0x20, 0x01, 0x21,
  0x00, 0xf0, 0x0c, 0xf9, 0x20, 0x23, 0xad, 0xf8, 0x04, 0x30, 0x01, 0x23,
  0x01, 0xa9, 0x8d, 0xf8, 0x06, 0x30, 0x09, 0x48, 0x10, 0x23, 0x8d, 0xf8,
  0x07, 0x30, 0x00, 0xf0, 0xa1, 0xf8, 0x07, 0x4b, 0x07, 0x4a, 0xf0, 0x21,
  0x5a, 0x60, 0x07, 0x4a, 0x82, 0xf8, 0x23, 0x10, 0x00, 0x22, 0x9a, 0x60,
  0x07, 0x22, 0x1a, 0x60, 0x03, 0xb0, 0x00, 0xbd, 0x00, 0x08, 0x01, 0x40,
  0x10, 0xe0, 0x00, 0xe0, 0x0f, 0x55, 0x22, 0x00, 0x00, 0xed, 0x00, 0xe0,
  0x08, 0xb5, 0xff, 0xf7, 0xcd, 0xff, 0xfe, 0xe7, 0x3b, 0x4b, 0x3c, 0x4a,
  0x18, 0x68, 0x82, 0xb0, 0x40, 0xf0, 0x01, 0x00, 0x18, 0x60, 0x58, 0x68,
  0x00, 0x21, 0x00, 0xea, 0x02, 0x02, 0x5a, 0x60, 0x1a, 0x68, 0x22, 0xf0,
  0x84, 0x72, 0x22, 0xf4, 0x80, 0x32, 0x1a, 0x60, 0x1a, 0x68, 0x22, 0xf4,
  0x80, 0x22, 0x1a, 0x60, 0x5a, 0x68, 0x22, 0xf4, 0xfe, 0x02, 0x5a, 0x60,
  0x4f, 0xf4, 0x1f, 0x02, 0x9a, 0x60, 0x01, 0x91, 0x00, 0x91, 0x1a, 0x68,
  0x42, 0xf4, 0x80, 0x32, 0x1a, 0x60, 0x03, 0xe0, 0x01, 0x9b, 0xb3, 0xf5,
  0xa0, 0x6f, 0x0a, 0xd0, 0x27, 0x4b, 0x1b, 0x68, 0x03, 0xf4, 0x00, 0x33,
  0x00, 0x93, 0x01, 0x9b, 0x01, 0x33, 0x01, 0x93, 0x00, 0x9b, 0x00, 0x2b,
  0xf0, 0xd0, 0x22, 0x4b, 0x1b, 0x68, 0x13, 0xf4, 0x00, 0x33, 0x05, 0xd0,
  0x01, 0x23, 0x00, 0x93, 0x00, 0x9b, 0x01, 0x2b, 0x02, 0xd0, 0xfe, 0xe7,
  0x00, 0x93, 0xf9, 0xe7, 0x1d, 0x4a, 0x1b, 0x4b, 0x11, 0x68, 0x41, 0xf0,
  0x10, 0x01, 0x11, 0x60, 0x11, 0x68, 0x21, 0xf0, 0x03, 0x01, 0x11, 0x60,
  0x11, 0x68, 0x41, 0xf0, 0x02, 0x01, 0x11, 0x60, 0x5a, 0x68, 0x5a, 0x60,
  0x5a, 0x68, 0x5a, 0x60, 0x5a, 0x68, 0x42, 0xf4, 0x80, 0x62, 0x5a, 0x60,
  0x5a, 0x68, 0x22, 0xf4, 0x7c, 0x12, 0x5a, 0x60, 0x5a, 0x68, 0x42, 0xf4,
  0xe8, 0x12, 0x5a, 0x60, 0x1a, 0x68, 0x42, 0xf0, 0x80, 0x72, 0x1a, 0x60,
  0x0a, 0x4b, 0x1a, 0x68, 0x12, 0xf0, 0x00, 0x7f, 0xfa, 0xd0, 0x5a, 0x68,
  0x22, 0xf0, 0x03, 0x02, 0x5a, 0x60, 0x5a, 0x68, 0x42, 0xf0, 0x02, 0x02,
  0x5a, 0x60, 0x04, 0x4b, 0x5b, 0x68, 0x03, 0xf0, 0x0c, 0x03, 0x08, 0x2b,
  0xf9, 0xd1, 0x02, 0xb0, 0x70, 0x47, 0x00, 0xbf, 0x00, 0x10, 0x02, 0x40,
  0x00, 0x00, 0xff, 0xf8, 0x00, 0x20, 0x02, 0x40, 0x21, 0xf0, 0x60, 0x41,
  0x21, 0xf0, 0x7f, 0x01, 0x01, 0x4b, 0x01, 0x43, 0x99, 0x60, 0x70, 0x47,
  0x00, 0xed, 0x00, 0xe0, 0xcb, 0x78, 0xf0, 0xb4, 0x13, 0xf0, 0x10, 0x0f,
  0x18, 0xbf, 0x8a, 0x78, 0x0c, 0x88, 0x03, 0xf0, 0x0f, 0x06, 0x18, 0xbf,
  0x16, 0x43, 0x14, 0xf0, 0xff, 0x0f, 0x1f, 0xd0, 0x07, 0x68, 0x00, 0x22,
  0x02, 0xe0, 0x01, 0x32, 0x08, 0x2a, 0x18, 0xd0, 0x01, 0x21, 0x91, 0x40,
  0x01, 0xea, 0x04, 0x05, 0x8d, 0x42, 0xf6, 0xd1, 0x91, 0x00, 0x4f, 0xf0,
  0x0f, 0x0c, 0x0c, 0xfa, 0x01, 0xfc, 0x16, 0xfa, 0x01, 0xf1, 0x27, 0xea,
  0x0c, 0x07, 0x28, 0x2b, 0x47, 0xea, 0x01, 0x07, 0x2f, 0xd0, 0x48, 0x2b,
  0x08, 0xbf, 0x05, 0x61, 0x01, 0x32, 0x08, 0x2a, 0xe6, 0xd1, 0x07, 0x60,
  0xff, 0x2c, 0x22, 0xd9, 0x47, 0x68, 0x00, 0x22, 0x02, 0xe0, 0x01, 0x32,
  0x08, 0x2a, 0x1b, 0xd0, 0x01, 0x25, 0x02, 0xf1, 0x08, 0x01, 0x15, 0xfa,
  0x01, 0xf1, 0x01, 0xea, 0x04, 0x05, 0x8d, 0x42, 0xf3, 0xd1, 0x91, 0x00,
  0x4f, 0xf0, 0x0f, 0x0c, 0x0c, 0xfa, 0x01, 0xfc, 0x16, 0xfa, 0x01, 0xf1,
  0x27, 0xea, 0x0c, 0x07, 0x28, 0x2b, 0x47, 0xea, 0x01, 0x07, 0x08, 0xd0,
  0x48, 0x2b, 0x08, 0xbf, 0x05, 0x61, 0x01, 0x32, 0x08, 0x2a, 0xe3, 0xd1,
  0x47, 0x60, 0xf0, 0xbc, 0x70, 0x47, 0x45, 0x61, 0xdb, 0xe7, 0x45, 0x61,
  0xb7, 0xe7, 0x00, 0xbf, 0x01, 0x61, 0x70, 0x47, 0x41, 0x61, 0x70, 0x47,
  0x29, 0xb9, 0x05, 0x4b, 0x9a, 0x69, 0x22, 0xea, 0x00, 0x00, 0x98, 0x61,
  0x70, 0x47, 0x02, 0x4b, 0x9a, 0x69, 0x10, 0x43, 0x98, 0x61, 0x70, 0x47,
  0x00, 0x10, 0x02, 0x40, 0x00, 0x21, 0x03, 0xe0, 0x09, 0x4b, 0x5b, 0x58,
  0x43, 0x50, 0x04, 0x31, 0x08, 0x48, 0x09, 0x4b, 0x42, 0x18, 0x9a, 0x42,
  0xf6, 0xd3, 0x08, 0x4a, 0x02, 0xe0, 0x00, 0x23, 0x42, 0xf8, 0x04, 0x3b,
  0x06, 0x4b, 0x9a, 0x42, 0xf9, 0xd3, 0xff, 0xf7, 0xf3, 0xfe, 0x70, 0x47,
  0xe2, 0x43, 0x00, 0x08, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20,
  0x00, 0x02, 0x00, 0x20, 0x01, 0x02, 0x00, 0x20, 0xfe, 0xe7
};

uint32_t current_address = 0x08004000;

void ProgramPage(const uint8_t* data, size_t size) {
  FLASH_ErasePage(current_address);
  const uint32_t* words = static_cast<const uint32_t*>(
      static_cast<const void*>(data));
  for (size_t written = 0; written < size; written += 4) {
    FLASH_ProgramWord(current_address, *words++);
    current_address += 4;
  }
};

void Init() {
  SystemInit();
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
  GPIO_InitTypeDef gpio_init;
  gpio_init.GPIO_Pin = GPIO_Pin_5;
  gpio_init.GPIO_Speed = GPIO_Speed_10MHz;
  gpio_init.GPIO_Mode = GPIO_Mode_Out_PP;
  GPIO_Init(GPIOA, &gpio_init);
  GPIO_SetBits(GPIOA, GPIO_Pin_5);
}

int main(void) {
  Init();
  
  // Copy program to flash, then boot.
  FLASH_Unlock();
  ProgramPage(blink_code, sizeof(blink_code) + 4);
  FLASH_Lock();
  
  GPIO_ResetBits(GPIOA, GPIO_Pin_5);
  
  // Now jump into user code...
  Uninitialize();
  JumpTo(0x08004000);
  while (1) { }
}
